{"version":3,"sources":["logo.svg","components/MapComponent.js","App.js","index.js"],"names":["MapComponent","map","useRef","useState","centerCoord","setcenterCoord","coord","id","name","placemarks","setplacemarks","inputEl","addPlacemark","length","current","value","className","onClick","onSubmit","e","preventDefault","ref","defaultValue","element","array","filter","deletePlacemark","onLoad","ymaps","geocode","then","result","console","log","modules","instanceRef","defaultState","center","zoom","onBoundsChange","get","getCenter","width","height","onDragEnd","push","onBoundsPlacemarkChange","geometry","getCoordinates","options","draggable","hideIconOnBalloonOpen","hasBalloon","properties","balloonContentHeader","index","polyGeo","balloonCloseButton","strokeColor","strokeWidth","strokeOpacity","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAAe,I,iCCGR,SAASA,IACZ,IAAMC,EAAMC,iBAAO,MAGnB,EAAsCC,mBAAS,CAAC,MAAO,QAAvD,mBAAOC,EAAP,KAAoBC,EAApB,KAGA,EAAoCF,mBAAS,CAAC,CAAEG,MAAO,CAAC,MAAO,OAAQC,GAAI,EAAGC,KAAM,WAApF,mBAAOC,EAAP,KAAmBC,EAAnB,KAGMC,EAAUT,iBAAO,MAsBnBU,EAAe,WACfF,EAAc,GAAD,mBAAKD,GAAL,CAAiB,CAAEH,MAAOF,EAAaG,GAAIE,EAAWA,EAAWI,OAAS,GAAGN,GAAK,EAAGC,KAAMG,EAAQG,QAAQC,WAc5H,OACI,sBAAKC,UAAU,OAAf,UACI,sBAAKA,UAAU,cAAf,UACI,wBAAQC,QAAS,kBAAML,KAAvB,6FACA,sBAAMM,SAAU,SAACC,GAAQA,EAAEC,iBAAkBR,KAA7C,SACI,uBAAOS,IAAKV,EAASW,aAAa,oEAKlCb,EAAWR,KAAI,SAACkB,GACZ,OACI,sBAAKH,UAAU,YAAf,UAEI,qBAAKA,UAAU,cAAf,SAA8BG,EAAEX,OAChC,wBAAQS,QAAS,kBAzBvB,SAACM,GACnB,IAAIC,EAAQf,EAAWgB,QAAO,SAAAN,GAAC,OAAIA,EAAEZ,IAAMgB,EAAQhB,MACnDG,EAAcc,GAuBiCE,CAAgBP,IAAvC,6BAKpB,eAAC,IAAD,CACIQ,OAAQ,SAAAC,GAAK,OA1BX,SAACA,GACXA,EAAMC,QAAQ,wCACTC,MAAK,SAAAC,GAAM,OAAIC,QAAQC,IAAIF,MAwBPF,CAAQD,IACzBM,QAAS,CAAC,WACVC,YAAalC,EACbmC,aA3DK,CAAEC,OAAQ,CAAC,MAAO,OAAQC,KAAM,IA4DrCC,eAzDS,SAAApB,GACjBd,EAAec,EAAEqB,IAAI,UAAUC,cAyDvBC,MAAM,QACNC,OAAO,QAPX,UAWQlC,EAAWR,KAAI,SAACsB,GACZ,OACI,cAAC,IAAD,CACIqB,UAAW,SAAAzB,GAAC,OA7DV,SAACA,EAAGZ,GAC9B,IAAIiB,EAAQ,GACZf,EAAWR,KAAI,SAACsB,GACRA,EAAQhB,KAAOA,IACfgB,EAAQjB,MAAQa,GAEpBK,EAAMqB,KAAKtB,MAEfb,EAAcc,GAqD0BsB,CAAwB3B,EAAEqB,IAAI,UAAUO,SAASC,iBAAkBzB,EAAQhB,KAC3F0C,QAAS,CACLC,WAAW,EACXC,uBAAuB,EACvBC,YAAY,GAGhBL,SAAUxB,EAAQjB,MAClB4B,QAAS,CAAC,0BAA2B,wBACrCmB,WAAY,CACRC,qBAAsB/B,EAAQf,WAO9CC,EAAWR,KAAI,SAACkB,EAAGoC,GACf,IAAIC,EAAU,GACd,GAAI/C,EAAW8C,EAAQ,GAGnB,OAFAC,EAAQX,KAAKpC,EAAW8C,GAAOjD,OAC/BkD,EAAQX,KAAKpC,EAAW8C,EAAQ,GAAGjD,OAE/B,cAAC,IAAD,CAEIyC,SACIS,EAEJP,QAAS,CACLQ,oBAAoB,EACpBC,YAAa,OACbC,YAAa,EACbC,cAAe,eCpGxCC,MAVf,WAEE,OACE,cAAC,IAAD,UAEE,cAAC7D,EAAD,OCNN8D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e5dbdf4d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useRef, useState } from 'react';\r\nimport { Map, Placemark, Polyline } from 'react-yandex-maps';\r\n\r\nexport function MapComponent() {\r\n    const map = useRef(null);\r\n\r\n    //Хранилище для состояния координат центра карты\r\n    const [centerCoord, setcenterCoord] = useState([55.76, 37.64]);\r\n\r\n    //Хранилище для состояния значений всех меток\r\n    const [placemarks, setplacemarks] = useState([{ coord: [55.76, 37.64], id: 0, name: \"Start\" }]);\r\n\r\n    //Хранилище для имени метки из input\r\n    const inputEl = useRef(null);\r\n\r\n    const mapState = { center: [55.76, 37.64], zoom: 10 };\r\n\r\n    //Смена координат центра карты при прокрутке карты\r\n    let onBoundsChange = e => {\r\n        setcenterCoord(e.get('target').getCenter())\r\n    }\r\n\r\n    //Смена координат метки при перемещении метки\r\n    let onBoundsPlacemarkChange = (e, id) => {\r\n        let array = [];\r\n        placemarks.map((element) => {\r\n            if (element.id === id) {\r\n                element.coord = e\r\n            }\r\n            array.push(element);\r\n        })\r\n        setplacemarks(array)\r\n    }\r\n\r\n    //Добавление метки\r\n    let addPlacemark = () => {\r\n        setplacemarks([...placemarks, { coord: centerCoord, id: placemarks[placemarks.length - 1].id + 1, name: inputEl.current.value }])\r\n    }\r\n\r\n    //Удаление метки\r\n    let deletePlacemark = (element) => {\r\n        let array = placemarks.filter(e => e.id != element.id)\r\n        setplacemarks(array)\r\n    }\r\n\r\n    let geocode = (ymaps) => {\r\n        ymaps.geocode('Мытищи')\r\n            .then(result => console.log(result))\r\n    }\r\n\r\n    return (\r\n        <div className=\"page\">\r\n            <div className=\"pageOptions\">\r\n                <button onClick={() => addPlacemark()}>Добавить метку</button>\r\n                <form onSubmit={(e) => { e.preventDefault(); addPlacemark() }}>\r\n                    <input ref={inputEl} defaultValue=\"Новая метка\" />\r\n                </form>\r\n\r\n                {\r\n                    //создание описания меток меток\r\n                    placemarks.map((e) => {\r\n                        return (\r\n                            <div className=\"placemark\">\r\n\r\n                                <div className=\"placemarkEl\">{e.name}</div>\r\n                                <button onClick={() => deletePlacemark(e)}>delete</button>\r\n                            </div>\r\n                        )\r\n                    })}\r\n            </div>\r\n            <Map\r\n                onLoad={ymaps => geocode(ymaps)}\r\n                modules={['geocode']}\r\n                instanceRef={map}\r\n                defaultState={mapState}\r\n                onBoundsChange={onBoundsChange}\r\n                width='500px'\r\n                height='500px'\r\n            >\r\n                {\r\n                    //создание меток\r\n                    placemarks.map((element) => {\r\n                        return (\r\n                            <Placemark\r\n                                onDragEnd={e => onBoundsPlacemarkChange(e.get('target').geometry.getCoordinates(), element.id)}\r\n                                options={{\r\n                                    draggable: true,\r\n                                    hideIconOnBalloonOpen: false,\r\n                                    hasBalloon: true\r\n\r\n                                }}\r\n                                geometry={element.coord}\r\n                                modules={['geoObject.addon.balloon', 'geoObject.addon.hint']}\r\n                                properties={{\r\n                                    balloonContentHeader: element.name,\r\n                                }}\r\n                            />\r\n                        )\r\n                    })}\r\n                {\r\n                    //создание маршрута между метками \r\n                    placemarks.map((e, index) => {\r\n                        let polyGeo = [];\r\n                        if (placemarks[index + 1]) {\r\n                            polyGeo.push(placemarks[index].coord)\r\n                            polyGeo.push(placemarks[index + 1].coord)\r\n                            return (\r\n                                <Polyline\r\n\r\n                                    geometry={\r\n                                        polyGeo\r\n                                    }\r\n                                    options={{\r\n                                        balloonCloseButton: false,\r\n                                        strokeColor: '#000',\r\n                                        strokeWidth: 4,\r\n                                        strokeOpacity: 0.5,\r\n                                    }}\r\n                                />\r\n                            )\r\n                        }\r\n                    })\r\n                }\r\n            </Map>\r\n        </div>\r\n    )\r\n}\r\n","import logo from './logo.svg';\r\nimport './App.css';\r\nimport { MapComponent } from './components/MapComponent';\r\nimport { YMaps, Map } from 'react-yandex-maps';\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <YMaps\r\n    >\r\n      <MapComponent />\r\n    </YMaps>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}